struct CameraUniform {
	position: vec4<f32>,
    projection: mat4x4<f32>,
};

struct ModelUniform {
	color: vec4<f32>,
}

@group(0) @binding(0)
var<uniform> camera: CameraUniform;

@group(1) @binding(0)
var<uniform> model: ModelUniform;

struct VertexInput {
	@location(0) position: vec3<f32>,
}

struct VertexOutput {
    @builtin(position) clip_position: vec4<f32>,
}

@vertex
fn vs_main(input: VertexInput) -> VertexOutput {

	let world_position = vec4<f32>(input.position, 1.0);

    var out: VertexOutput;
    out.clip_position = camera.projection * world_position;
    return out;
}

@fragment
fn fs_main(in: VertexOutput) -> @location(0) vec4<f32> {
    return model.color;
}


